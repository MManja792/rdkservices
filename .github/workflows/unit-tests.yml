name: unit-tests

on:
  push:
    branches: [ main, 'sprint/**', 'release/**' ]

  pull_request:
    # By default: opened, synchronize, or reopened.
    branches: [ main, 'sprint/**', 'release/**' ]

env:
  BUILD_TYPE: Debug

  # Refs for 2208_sprint.
  THUNDER_REF: "R2-v1.11"
  INTERFACES_REF: "f61d710cc51628819d0fd80b8cc65e55eeec12b4"

jobs:
  all:
    runs-on: ubuntu-latest

    steps:
      - name: Set up cache
        # Cache Thunder/ThunderInterfaces.
        # https://github.com/actions/cache
        # https://docs.github.com/en/rest/actions/cache
        if: ${{ !env.ACT }}
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            build/Thunder
            build/ThunderInterfaces
            build/ThunderTools
            install
            !install/etc/WPEFramework/plugins
            !install/usr/bin/RdkServicesTest
            !install/usr/include/gmock
            !install/usr/include/gtest
            !install/usr/lib/libgmockd.a
            !install/usr/lib/libgmock_maind.a
            !install/usr/lib/libgtestd.a
            !install/usr/lib/libgtest_maind.a
            !install/usr/lib/cmake/GTest
            !install/usr/lib/pkgconfig/gmock.pc
            !install/usr/lib/pkgconfig/gmock_main.pc
            !install/usr/lib/pkgconfig/gtest.pc
            !install/usr/lib/pkgconfig/gtest_main.pc
            !install/usr/lib/wpeframework/plugins
          key: ${{ runner.os }}-${{ env.THUNDER_REF }}-${{ env.INTERFACES_REF }}-2

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'
      - run: pip install jsonref

      - name: Set up CMake
        # 3.16.x To support flow control commands to be overridden.
        # Installs in: find /opt -ipath *bin/cmake
        uses: jwlawson/actions-setup-cmake@v1.12
        with:
          cmake-version: '3.16.x'

      - name: Install packages
        run: >
          sudo apt update && sudo apt install -y libsqlite3-dev libcurl4-openssl-dev

      - name: Checkout Thunder
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          repository: rdkcentral/Thunder
          path: Thunder
          ref: ${{env.THUNDER_REF}}

      - name: Configure ThunderTools
        if: steps.cache.outputs.cache-hit != 'true'
        run: >
          cmake
          -S "${{github.workspace}}/Thunder/Tools"
          -B build/ThunderTools
          -DCMAKE_INSTALL_PREFIX="${{github.workspace}}/install/usr"
          -DCMAKE_MODULE_PATH="${{github.workspace}}/install/tools/cmake"
          -DGENERIC_CMAKE_MODULE_PATH="${{github.workspace}}/install/tools/cmake"

      - name: Build ThunderTools
        if: steps.cache.outputs.cache-hit != 'true'
        run: >
          cmake
          --build build/ThunderTools -j8

      - name: Install ThunderTools
        if: steps.cache.outputs.cache-hit != 'true'
        run: >
          cmake
          --install build/ThunderTools

      - name: Configure Thunder
        if: steps.cache.outputs.cache-hit != 'true'
        run: >
          cmake
          -S "${{github.workspace}}/Thunder"
          -B build/Thunder
          -DCMAKE_INSTALL_PREFIX="${{github.workspace}}/install/usr"
          -DCMAKE_MODULE_PATH="${{github.workspace}}/install/tools/cmake"
          -DBUILD_TYPE=${{env.BUILD_TYPE}}
          -DBINDING=127.0.0.1
          -DPORT=55555

      - name: Build Thunder
        if: steps.cache.outputs.cache-hit != 'true'
        run: >
          cmake
          --build build/Thunder -j8

      - name: Install Thunder
        if: steps.cache.outputs.cache-hit != 'true'
        run: >
          cmake
          --install build/Thunder

      - name: Checkout ThunderInterfaces
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          repository: rdkcentral/ThunderInterfaces
          path: ThunderInterfaces
          ref: ${{env.INTERFACES_REF}}

      - name: Configure ThunderInterfaces
        if: steps.cache.outputs.cache-hit != 'true'
        run: >
          cmake
          -S "${{github.workspace}}/ThunderInterfaces"
          -B build/ThunderInterfaces
          -DCMAKE_INSTALL_PREFIX="${{github.workspace}}/install/usr"
          -DCMAKE_MODULE_PATH="${{github.workspace}}/install/tools/cmake"

      - name: Build ThunderInterfaces
        if: steps.cache.outputs.cache-hit != 'true'
        run: >
          cmake
          --build build/ThunderInterfaces -j8

      - name: Install ThunderInterfaces
        if: steps.cache.outputs.cache-hit != 'true'
        run: >
          cmake
          --install build/ThunderInterfaces

      - name: Checkout rdkservices
        uses: actions/checkout@v3
        with:
          path: rdkservices

      - name: Configure rdkservices
        run: >
          cmake
          -S "${{github.workspace}}/rdkservices"
          -B build/rdkservices
          -DCMAKE_INSTALL_PREFIX="${{github.workspace}}/install/usr"
          -DCMAKE_MODULE_PATH="${{github.workspace}}/install/tools/cmake"
          -DCMAKE_CXX_FLAGS="-I ${{github.workspace}}/rdkservices/Tests/headers
          -I ${{github.workspace}}/rdkservices/Tests/headers/audiocapturemgr
          -I ${{github.workspace}}/rdkservices/Tests/headers/rdk/ds
          -I ${{github.workspace}}/rdkservices/Tests/headers/rdk/iarmbus
          -I ${{github.workspace}}/rdkservices/Tests/headers/rdk/iarmmgrs-hal
          --coverage -Wall -Werror -Wno-unused-parameter -Wno-unused-result -Wl,-wrap,system
          -DENABLE_TELEMETRY_LOGGING
          -DUSE_IARMBUS
          -DENABLE_GTEST"
          -DCOMCAST_CONFIG=OFF
          -DPLUGIN_DATACAPTURE=ON
          -DPLUGIN_DEVICEDIAGNOSTICS=ON
          -DPLUGIN_LOCATIONSYNC=ON
          -DPLUGIN_PERSISTENTSTORE=ON
          -DPLUGIN_TIMER=ON
          -DPLUGIN_SECURITYAGENT=ON
          -DPLUGIN_DEVICEIDENTIFICATION=ON
          -DBUILD_REALTEK=ON
          -DPLUGIN_FRAMERATE=ON
          -DCMAKE_DISABLE_FIND_PACKAGE_DS=ON
          -DCMAKE_DISABLE_FIND_PACKAGE_IARMBus=ON
          -DPLUGIN_AVINPUT=ON
          -DPLUGIN_TELEMETRY=ON
          -DPLUGIN_USBACCESS=ON
          -DPLUGIN_LOGGINGPREFERENCES=ON
          -DPLUGIN_USERPREFERENCES=ON
          -DCMAKE_DISABLE_FIND_PACKAGE_Udev=ON
          -DPLUGIN_MESSENGER=ON
          -DPLUGIN_DEVICEINFO=ON
          -DPLUGIN_SYSTEMSERVICES=ON
          -DCMAKE_DISABLE_FIND_PACKAGE_RFC=ON
          -DRDK_SERVICES_TEST=ON
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build rdkservices
        run: >
          cmake
          --build build/rdkservices -j8

      - name: Install rdkservices
        run: >
          cmake
          --install build/rdkservices

      - name: Install valgrind
        run: >
          sudo apt update && sudo apt install -y valgrind

      - name: Start servers
        # nohup to keep it running.
        run: |
          nohup python rdkservices/Tests/source/tr69hostif.py &
          sleep 0.1

      - name: Set up files
        run: |
          printf 'MFG_NAME=Pace\nFRIENDLY_ID="Pace Xi5"\n' | sudo tee /etc/device.properties
          printf 'deviceType=IpStb\n' | sudo tee /etc/authService.conf
          printf 'imagename:PX051AEI_VBN_2203_sprint_20220331225312sdy_NG\nSDK_VERSION=17.3\nMEDIARITE=8.3.53\nYOCTO_VERSION=dunfell\n' | sudo tee /version.txt

          sudo mkdir /opt/secure
          sudo mkdir /opt/persistent
          sudo mkdir /opt/secure/reboot
          sudo mkdir /opt/secure/persistent
          sudo mkdir /opt/secure/persistent/System
          sudo mkdir /opt/logs
          sudo mkdir /lib/rdk
          sudo chmod -R 1777 /opt
          sudo chmod -R 1777 /lib/rdk

          printf 'PreviousRebootReason: 18.08.2022_09:51.38 RebootReason: Triggered from SystemServices! MAINTENANCE_REBOOT \n PreviousRebootTime: 18.08.2022_09:51.38 \n PreviousCustomReason:  MAINTENANCE_REBOOT \n PreviousOtherReason:  MAINTENANCE_REBOOT \n' |  sudo tee /opt/logs/rebootInfo.log
          printf '{\n\"timestamp\":\"Thu Aug 18 13:51:39 UTC 2022\",\n \"source\":\"HAL_CDL_notify_mgr_event",\n \"reason\":\"OPS_TRIGGERED\",\n \"customReason\":\"Unknown",\n \"otherReason\":\"Rebooting the box due to VL_CDL_MANAGER_EVENT_REBOOT...!\"\n}\n' |  sudo tee /opt/persistent/previousreboot.info
          printf '{\n\"lastHardPowerReset\":\"Thu Aug 18 13:51:39 UTC 2022\"\n}\n' |  sudo tee /opt/persistent/hardpower.info
          printf 'RDK_STARTED:35755' | sudo tee /opt/logs/rdk_milestones.log
          printf 'false' | sudo tee /opt/tmtryoptout
          printf '#!/bin/sh' | sudo tee /lib/rdk/getStateDetails.sh
          sudo chmod +x /lib/rdk/getStateDetails.sh
          printf 'M11632TR7543' | sudo tee /tmp/.STB_SER_NO
          printf 'imagename:AX013AN_5.6p4s1_VBN_sey\nVERSION=5.6.0.4\nBUILD_TIME=\"2022-08-05 16:14:54\"\nGenerated on Fri Aug 05 16:14:54 UTC 2022' | sudo tee /version.txt
          printf 'Method|xconf \nProto|\nStatus|Failure\nReboot|\nFailureReason|Invalid Request\nDnldVersn|AX013AN_5.6p4s1_VBN_sey\nDnldFile|\nDnlURL|https://dac15cdlserver.ae.ccp.xcal.tv:443/Images/AX013AN_5.6p4s1_VBN_sey-signed.bin\n FwupdateState|Failed\n' | sudo tee /opt/fwdnldstatus.txt

      - name: Run unit tests
        run: >
          PATH=${{github.workspace}}/install/usr/bin:${PATH}
          LD_LIBRARY_PATH=${{github.workspace}}/install/usr/lib:${{github.workspace}}/install/usr/lib/wpeframework/plugins:${LD_LIBRARY_PATH}
          valgrind
          --tool=memcheck
          --log-file=valgrind_log
          --leak-check=yes
          --show-reachable=yes
          --track-fds=yes
          --fair-sched=try
          RdkServicesTest

      - name: Stop servers
        run: |
          pkill -f rdkservices/Tests/source/tr69hostif.py

      - name: Install lcov
        run: >
          sudo apt update && sudo apt install -y lcov

      - name: Generate coverage
        run: >
          lcov -c
          -o coverage.info
          -d build/rdkservices

      - name: Filter coverage
        # Absolute path patterns.
        run: >
          lcov
          -r coverage.info
          '/usr/include/*'
          '*/build/rdkservices/_deps/*'
          '*/install/usr/include/*'
          '*/Tests/headers/*'
          '*/Tests/mocks/*'
          '*/Tests/source/*'
          '*/Tests/tests/*'
          '*/DeviceIdentification/Implementation/Realtek/*'
          -o filtered_coverage.info

      - name: Generate HTML
        run: >
          genhtml
          -o coverage
          -t "rdkservices coverage"
          filtered_coverage.info

      - name: Upload artifacts
        if: ${{ !env.ACT }}
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: |
            coverage/
            valgrind_log
